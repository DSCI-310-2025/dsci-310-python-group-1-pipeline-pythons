{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Credit Risk Prediction: Analyzing Loan Applicant Risk Based on Demographic and Financial Attributes\"\n",
        "author: \"Ayush Joshi, Stallon Pinto, & Zhanerke Zhumash\"\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    number-sections: true\n",
        "    theme: cosmo\n",
        "    fig-width: 8\n",
        "    fig-height: 6\n",
        "    fig-cap-location: bottom\n",
        "    tbl-cap-location: top\n",
        "  pdf:\n",
        "    toc: true\n",
        "    fig-pos: \"H\"\n",
        "bibliography: references.bib\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "---"
      ],
      "id": "fa201b37"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from scipy import stats\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score\n",
        "from sklearn.dummy import DummyClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np"
      ],
      "id": "3499c68c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Summary\n",
        "\n",
        "This project aims to develop a predictive model to assess the credit risk of loan applicants using the Statlog (German Credit Data) dataset. The primary objective is to determine whether an applicant is a good or bad credit risk based on various demographic and financial attributes. We explored a few models and landed on a Random Forest classifier as it had the highest accuracy and was also able to minimize false negatives, which is crucial for reducing the risk of approving applicants with poor creditworthiness.\n",
        "\n",
        "# Introduction\n",
        "\n",
        "## Background\n",
        "Credit risk assessment is a crucial process in banking and financial services. Lenders evaluate borrowers based on financial stability and past credit behavior to determine their likelihood of defaulting on a loan. With the advancements in machine learning, automated credit risk assessment has gained traction as it can efficiently analyze large datasets, identify risk patterns, and improve lending decisions [@basel2001]. This project explores whether a machine learning model can predict whether a loan applicant is a good or bad credit risk based on demographic and financial data.  \n",
        "\n",
        "## Research Question\n",
        "Can we classify a loan applicant as a **good** or **bad** credit risk using a combination of **demographic, financial, and loan-specific attributes**?  \n",
        "\n",
        "## Dataset: German Credit Data\n",
        "The dataset used in this analysis is the **German Credit Dataset**, originally compiled by **Professor Dr. Hans Hofmann** from **Universität Hamburg** [@statlog]. It contains 1,000 instances with 20 attributes describing various aspects of a loan applicant's financial and personal profile. The dataset has both categorical and numerical attributes and provides a labeled classification of good vs. bad credit risk.\n",
        "\n",
        "### Target Variable (Credit Standing)\n",
        "- **0** → Good Credit Risk (low risk, likely to repay)\n",
        "- **1** → Bad Credit Risk (high risk, potential default)\n",
        "\n",
        "### Key Features\n",
        "The dataset consists of three broad categories of features:\n",
        "\n",
        "1. **Demographic Information:**\n",
        "   - **Age** (numerical): The applicant's age in years.\n",
        "   - **Employment Status** (categorical): The applicant's work experience categorized into different groups.\n",
        "   - **Foreign Worker Status** (categorical): Whether the applicant is a foreign worker (Yes/No).\n",
        "   - **Personal Status & Gender** (categorical): Applicant's marital status and gender.\n",
        "\n",
        "2. **Financial Attributes:**\n",
        "   - **Credit History** (categorical): Previous credit behavior (e.g., no previous credit, delayed payments, fully repaid).\n",
        "   - **Status of Checking Account** (categorical): Information on the applicant's checking account balance.\n",
        "   - **Savings Account/Bonds** (categorical): Level of savings held by the applicant.\n",
        "   - **Credit Amount** (numerical): The total loan amount requested.\n",
        "   - **Other Debtors/Guarantors** (categorical): Whether the applicant has co-applicants or guarantors.\n",
        "\n",
        "3. **Loan & Payment Behavior:**\n",
        "   - **Loan Purpose** (categorical): The purpose for which the loan is requested (e.g., car, education, business).\n",
        "   - **Loan Duration (Months)** (numerical): The length of the loan term.\n",
        "   - **Installment Rate** (numerical): Loan repayment amount as a percentage of disposable income.\n",
        "   - **Existing Credits at Bank** (numerical): The number of current outstanding loans with the bank.\n",
        "   - **Other Installment Plans** (categorical): Whether the applicant has other loans with banks or stores.\n",
        "   - **Housing Status** (categorical): Whether the applicant owns, rents, or lives rent-free.\n",
        "\n",
        "# Methods & Results\n",
        "\n",
        "This section outlines the step-by-step methodology used to preprocess the dataset, perform exploratory data analysis (EDA), and build machine learning models for credit risk classification.\n",
        "\n",
        "## Data Preprocessing\n",
        "\n",
        "### Loading and Cleaning the Data\n",
        "- The dataset was loaded from a **CSV file** into a Jupyter Notebook.\n",
        "- Column names were **added to the dataset** for readability.\n",
        "- **Ambiguous categorical feature names** were mapped to **interpretable labels** for improved understanding.\n"
      ],
      "id": "c3624590"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-raw-data\n",
        "#| tbl-cap: Raw German Credit Data (First 5 Rows)\n",
        "file_path = \"data/german.data\"\n",
        "df = pd.read_csv(file_path, sep=\" \", header=None)\n",
        "df.head().style.set_table_attributes('class=\"dataframe\"')"
      ],
      "id": "tbl-raw-data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "column_names = [\n",
        "\"Checking_Acc_Status\", \"Duration (in months)\", \"Credit_History\", \"Purpose\",\n",
        "\"Credit_Amount\", \"Savings_Acc\", \"Employment\", \"Installment_Rate\",\n",
        "\"Personal_Status\", \"Other_Debtors\", \"Residence_Since\", \"Property\",\n",
        "\"Age\", \"Other_Installment\", \"Housing\", \"Existing_Credits\",\n",
        "\"Job\", \"Num_People_Maintained\", \"Telephone\", \"Foreign_Worker\", \"Credit Standing\"\n",
        "]\n",
        "\n",
        "df.columns = column_names\n",
        "mappings = {\n",
        "\"Checking_Acc_Status\": {\n",
        "\"A11\": \"< 0 DM\",\n",
        "\"A12\": \"0-200 DM\",\n",
        "\"A13\": \">= 200 DM or Salary Assigned\",\n",
        "\"A14\": \"No Checking Account\"\n",
        "},\n",
        "\"Credit_History\": {\n",
        "\"A30\": \"No Credit Taken / All Paid\",\n",
        "\"A31\": \"All Paid (Same Bank)\",\n",
        "\"A32\": \"All Paid (Other Banks)\",\n",
        "\"A33\": \"Past Delays in Payment\",\n",
        "\"A34\": \"Critical Account / Other Existing Credits\"\n",
        "},\n",
        "\"Purpose\": {\n",
        "\"A40\": \"New Car\",\n",
        "\"A41\": \"Used Car\",\n",
        "\"A42\": \"Furniture/Equipment\",\n",
        "\"A43\": \"Radio/TV\",\n",
        "\"A44\": \"Domestic Appliances\",\n",
        "\"A45\": \"Repairs\",\n",
        "\"A46\": \"Education\",\n",
        "\"A47\": \"Vacation\",\n",
        "\"A48\": \"Retraining\",\n",
        "\"A49\": \"Business\",\n",
        "\"A410\": \"Others\"\n",
        "},\n",
        "\"Savings_Acc\": {\n",
        "\"A61\": \"< 100 DM\",\n",
        "\"A62\": \"100-500 DM\",\n",
        "\"A63\": \"500-1000 DM\",\n",
        "\"A64\": \">= 1000 DM\",\n",
        "\"A65\": \"No Savings Account\"\n",
        "},\n",
        "\"Employment\": {\n",
        "\"A71\": \"Unemployed\",\n",
        "\"A72\": \"< 1 Year\",\n",
        "\"A73\": \"1-4 Years\",\n",
        "\"A74\": \"4-7 Years\",\n",
        "\"A75\": \">= 7 Years\"\n",
        "},\n",
        "\"Personal_Status\": {\n",
        "\"A91\": \"Male: Divorced/Separated\",\n",
        "\"A92\": \"Female: Divorced/Separated/Married\",\n",
        "\"A93\": \"Male: Single\",\n",
        "\"A94\": \"Male: Married/Widowed\",\n",
        "\"A95\": \"Female: Single\"\n",
        "},\n",
        "\"Other_Debtors\": {\n",
        "\"A101\": \"None\",\n",
        "\"A102\": \"Co-applicant\",\n",
        "\"A103\": \"Guarantor\"\n",
        "},\n",
        "\"Property\": {\n",
        "\"A121\": \"Real Estate\",\n",
        "\"A122\": \"Building Society Savings / Life Insurance\",\n",
        "\"A123\": \"Car or Other Property\",\n",
        "\"A124\": \"No Property\"\n",
        "},\n",
        "\"Other_Installment\": {\n",
        "\"A141\": \"Bank\",\n",
        "\"A142\": \"Stores\",\n",
        "\"A143\": \"None\"\n",
        "},\n",
        "\"Housing\": {\n",
        "\"A151\": \"Rent\",\n",
        "\"A152\": \"Own\",\n",
        "\"A153\": \"For Free\"\n",
        "},\n",
        "\"Job\": {\n",
        "\"A171\": \"Unemployed / Unskilled (Non-Resident)\",\n",
        "\"A172\": \"Unskilled (Resident)\",\n",
        "\"A173\": \"Skilled Employee / Official\",\n",
        "\"A174\": \"Management / Self-Employed / Highly Qualified\"\n",
        "},\n",
        "\"Telephone\": {\n",
        "\"A191\": \"No Telephone\",\n",
        "\"A192\": \"Yes, Registered\"\n",
        "},\n",
        "\"Foreign_Worker\": {\n",
        "\"A201\": \"Yes\",\n",
        "\"A202\": \"No\"\n",
        "}\n",
        "}\n",
        "for col, mapping in mappings.items():\n",
        "df[col] = df[col].map(mapping)"
      ],
      "id": "92e1a760",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-mapped-data\n",
        "#| tbl-cap: German Credit Data with Mapped Values (First 5 Rows)\n",
        "df.head().style.set_table_attributes('class=\"dataframe\"')"
      ],
      "id": "tbl-mapped-data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_encoded = pd.get_dummies(df, drop_first=True).astype(int)\n",
        "df_encoded['Credit Standing'] = df_encoded['Credit Standing'].map({1: 0, 2: 1})\n",
        "for col in df_encoded.columns:\n",
        "if df_encoded[col].dtype == 'object':\n",
        "df_encoded[col] = df_encoded[col].astype('category').cat.codes\n",
        "bad_credit_percentage = df_encoded['Credit Standing'].mean() 100"
      ],
      "id": "51aae21e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Exploratory Data Analysis\n",
        "\n",
        "The dataset contains ```{python} len(df)``` instances with ```{python} len(df.columns)``` attributes. Approximately ```{python} f\"{bad_credit_percentage:.1f}\"```% of the applicants are classified as bad credit risks.\n",
        "\n",
        "::: {#fig-credit-distribution}\n",
        "![](../results/eda/credit_standing_distribution.png){width=60%}\n",
        "\n",
        "\n",
        "As shown in @fig-credit-distribution, the dataset is imbalanced, with a majority of applicants having good credit standing. This imbalance is important to consider when building and evaluating our predictive models.\n",
        "\n",
        "### Correlation Analysis\n"
      ],
      "id": "eafbd22d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "correlations = df_encoded.corr()['Credit Standing'].sort_values(ascending=False)\n",
        "top_correlations = correlations[1:11] # Exclude Credit Standing itself"
      ],
      "id": "5e90c3b8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "@tbl-correlations shows the top features correlated with credit standing. The strongest correlations are with checking account status, loan duration, and savings account status.\n"
      ],
      "id": "eb47cb1c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-correlations\n",
        "#| tbl-cap: Top 10 Features Correlated with Credit Standing\n",
        "pd.DataFrame({\n",
        "'Feature': top_correlations.index,\n",
        "'Correlation with Credit Standing': top_correlations.values\n",
        "}).style.format({'Correlation with Credit Standing': '{:.3f}'}).set_table_attributes('class=\"dataframe\"')"
      ],
      "id": "tbl-correlations",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here is the complete plot for the correlations:\n",
        "\n",
        "::: {#fig-corr-analysis}\n",
        "![](../results/eda/correlation_analysis.png){width=60%}\n",
        "\n",
        "## **Feature Distributions**\n",
        "Key numerical features were analyzed to observe differences between **good and bad credit applicants**.\n",
        "\n",
        "::: {#fig-feat-dist}\n",
        "![](../results/eda/feature_distributions.png){width=60%}\n",
        "\n",
        "\n",
        "#### **Credit Amount Distribution**\n",
        "_(See plot 1 in @fig_feat_dist)_\n",
        "- **Good credit applicants** borrowed, on average, **~2,985 DM**.\n",
        "- **Bad credit applicants** borrowed **~3,938 DM**, which is **~1,000 DM more**.\n",
        "- The distribution is **right-skewed**, meaning a few applicants borrowed **significantly higher amounts**.\n",
        "\n",
        "**Key Finding:**  \n",
        "- Higher loan amounts are **associated with a higher likelihood of bad credit standing**.\n",
        "\n",
        "#### **Age Distribution**\n",
        "_(See plot 2 in @fig_feat_dist)_\n",
        "- **Good credit applicants** had an **average age of 36.22 years**.\n",
        "- **Bad credit applicants** had an **average age of 33.96 years**.\n",
        "- The age distribution is **slightly right-skewed**, meaning there are **fewer older borrowers**.\n",
        "\n",
        "**Key Finding:**  \n",
        "- **Younger applicants** tend to have **worse credit standing**.\n",
        "- Older applicants are slightly **less likely to default**.\n",
        "\n",
        "#### **Loan Duration Distribution**\n",
        "_(See plot 3 in @fig_feat_dist)_\n",
        "- **Good credit applicants** held loans for **~19.21 months on average**.\n",
        "- **Bad credit applicants** held loans for **~24.86 months on average**.\n",
        "- **Longer loan durations correlate with a higher likelihood of bad credit.**\n",
        "\n",
        "**Key Finding:**  \n",
        "- Applicants with **longer loan durations** have a **higher risk of default**.\n",
        "\n",
        "\n",
        "\n",
        "## Model Performance Analysis\n",
        "\n",
        "To evaluate the effectiveness of different classification models for predicting credit standing, we tested three models:\n",
        "\n",
        "1. **Baseline Model (Majority Class Classifier)**\n",
        "2. **K-Nearest Neighbors (KNN) - Optimized**\n",
        "3. **Random Forest - Optimized**\n",
        "\n",
        "Each model was assessed based on accuracy, precision, recall, F1-score, and false negative rate (FNR), considering the imbalance in the dataset.\n"
      ],
      "id": "355af7e7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "X = df_encoded.drop('Credit Standing', axis=1)\n",
        "y = df_encoded['Credit Standing']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "def evaluate_model(model, X_test, y_test, model_name, scaled=False):\n",
        "\n",
        "X_test_eval = X_test_scaled if scaled else X_test\n",
        "\n",
        "y_pred = model.predict(X_test_eval)\n",
        "y_pred_proba = model.predict_proba(X_test_eval)[:, 1] if hasattr(model, \"predict_proba\") else None\n",
        "\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "precision = precision_score(y_test, y_pred)\n",
        "recall = recall_score(y_test, y_pred)\n",
        "f1 = f1_score(y_test, y_pred)\n",
        "\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "fn = cm[1, 0] # False Negatives\n",
        "tp = cm[1, 1] # True Positives\n",
        "fnr = fn / (fn + tp) if (fn + tp) > 0 else 0\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "xticklabels=['Good Credit', 'Bad Credit'],\n",
        "yticklabels=['Good Credit', 'Bad Credit'])\n",
        "plt.title(f'Confusion Matrix - {model_name}', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('True Label', fontsize=12)\n",
        "plt.xlabel('Predicted Label', fontsize=12)\n",
        "plt.tight_layout()\n",
        "\n",
        "return {\n",
        "'model_name': model_name,\n",
        "'accuracy': accuracy,\n",
        "'precision': precision,\n",
        "'recall': recall,\n",
        "'f1': f1,\n",
        "'fnr': fnr,\n",
        "'confusion_matrix': plt\n",
        "}"
      ],
      "id": "89d2511e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Baseline Model (Majority Class Classifier)\n"
      ],
      "id": "c5bea237"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "baseline_model = DummyClassifier(strategy='most_frequent')\n",
        "baseline_model.fit(X_train, y_train)\n",
        "baseline_metrics = evaluate_model(baseline_model, X_test, y_test, \"Baseline (Majority Class)\")"
      ],
      "id": "dc260f54",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#| label: fig-baseline-cm\n",
        "#| fig-cap: \"Confusion Matrix for Baseline Model\"\n",
        "\n",
        "![](results/models/baseline_confusion_matrix.png)\n",
        "\n",
        "**Key Takeaways:**\n",
        "- The baseline model highlights the importance of **building a predictive model**, as it **completely fails to detect bad credit applicants**.\n",
        "- **Misclassification Cost:** This model would **approve every bad credit applicant**, leading to financial losses.\n",
        "\n",
        "### K-Nearest Neighbors (Optimized)\n",
        "\n",
        "- **Hyperparameter tuning (Grid Search) was used to optimize:**\n",
        "  - **Distance Metric:** Manhattan\n",
        "  - **Number of Neighbors (k):** 3\n",
        "  - **Weighting:** Distance-based\n"
      ],
      "id": "2bbc57cc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "param_grid = {\n",
        "'n_neighbors': [3, 5, 7, 9, 11, 13, 15],\n",
        "'weights': ['uniform', 'distance'],\n",
        "'metric': ['euclidean', 'manhattan']\n",
        "}\n",
        "knn = KNeighborsClassifier()\n",
        "grid_search = GridSearchCV(knn, param_grid, cv=5, scoring='f1', n_jobs=-1)\n",
        "grid_search.fit(X_train_scaled, y_train)\n",
        "best_knn = grid_search.best_estimator_\n",
        "knn_metrics = evaluate_model(best_knn, X_test, y_test, \"KNN (Optimized)\", scaled=True)"
      ],
      "id": "8d3ef2f2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#| label: fig-knn-cm\n",
        "#| fig-cap: \"Confusion Matrix for K-Nearest Neighbors Model\"\n",
        "\n",
        "![](results/models/knn_confusion_matrix.png)\n",
        "\n",
        "\n",
        "**Key Takeaways:**\n",
        "- The KNN model shows **improvement over the baseline**.\n",
        "- **Bad Credit Recall improved to ```{python} f\"{knn_metrics['recall']*100:.1f}\"```%**, meaning the model **detects more defaulters**.\n",
        "- However, **it still struggles with false positives and false negatives**.\n",
        "\n",
        "### Random Forest (Optimized)\n",
        "\n",
        "- **Hyperparameter tuning (Grid Search) was used to optimize:**\n",
        "  - **Class Weight:** Balanced\n",
        "  - **Max Depth:** 20\n",
        "  - **Min Samples per Split:** 10\n",
        "  - **Number of Estimators:** 50\n"
      ],
      "id": "2d9b6cc9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "param_grid_rf = {\n",
        "'n_estimators': [50, 100, 200],\n",
        "'max_depth': [None, 10, 20, 30],\n",
        "'min_samples_split': [2, 5, 10],\n",
        "'class_weight': [None, 'balanced']\n",
        "}\n",
        "rf = RandomForestClassifier(random_state=42)\n",
        "grid_search_rf = GridSearchCV(rf, param_grid_rf, cv=5, scoring='f1', n_jobs=-1)\n",
        "grid_search_rf.fit(X_train, y_train)\n",
        "best_rf = grid_search_rf.best_estimator_\n",
        "rf_metrics = evaluate_model(best_rf, X_test, y_test, \"Random Forest (Optimized)\")"
      ],
      "id": "be30cd50",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#| label: fig-rf-cm\n",
        "#| fig-cap: \"Confusion Matrix for Random Forest Model\"\n",
        "\n",
        "![](results/models/randomforest_confusion_matrix.png)\n",
        "\n",
        "#| label: fig-feat-imp\n",
        "#| fig-cap: \"Feature Importance for Random Forest Model\"\n",
        "\n",
        "![](results/models/feature_importance.png)\n",
        "\n",
        "**Key Takeaways:**\n",
        "- **Random Forest outperforms both Baseline and KNN models.**\n",
        "- **Bad Credit Recall improved to ```{python} f\"{rf_metrics['recall']*100:.1f}\"```%**, meaning the model detects **more defaulters**.\n",
        "- **Balanced performance** with **good precision and recall trade-off**.\n",
        "\n",
        "The **Random Forest model** provides insight into which features contribute most to predicting **credit standing**, as shown in @fig-feature-importance.\n",
        "\n",
        "**Key Takeaways:**\n",
        "- **Credit Amount and Loan Duration** are the **two most important predictors** of credit risk.\n",
        "- **Checking Account Status (No Account or Negative Balance)** strongly correlates with credit standing.\n",
        "- **Younger applicants and those with poor credit history** tend to have worse credit standing.\n",
        "\n",
        "## Model Comparison\n",
        "\n",
        "#| label: fig-model-comp\n",
        "#| fig-cap: \"Model comparison between all models\"\n",
        "\n",
        "![](results/models/model_comparison.png)\n",
        "\n",
        "{python}\n",
        "#| label: tbl-model-metrics\n",
        "#| tbl-cap: \"Performance Metrics for All Models\"\n",
        "\n",
        "metrics_table = models_comparison[['accuracy', 'precision', 'recall', 'f1', 'fnr']].reset_index()\n",
        "metrics_table.style.format({\n",
        "'accuracy': '{:.3f}',\n",
        "'precision': '{:.3f}',\n",
        "'recall': '{:.3f}',\n",
        "'f1': '{:.3f}',\n",
        "'fnr': '{:.3f}'\n",
        "}).set_table_attributes('class=\"dataframe\")\n",
        "```\n",
        "\n",
        "\n",
        "# Discussion\n",
        "\n",
        "In our analysis, we evaluated three models: a Dummy Classifier, a k-Nearest Neighbors (k-NN) model, and a Random Forest model, to predict credit risk using the Statlog (German Credit Data) dataset. Each model's performance was assessed using key metrics: accuracy, precision, recall, F1 score, and false negative rate, as shown in @tbl-model-metrics and @fig-model-comparison. We also consider the false negative rate in our analysis since we believe it's crucial to minimize the false negative count when it comes to financial reliability.\n",
        "\n",
        "## Dummy Classifier Performance\n",
        "- **Purpose**: The Dummy Classifier serves as a baseline, predicting the majority class without learning from the data.\n",
        "- **Metrics**:\n",
        "  - **Recall, Precision, and F1 Score**: These metrics are typically low for the Dummy Classifier, as it fails to identify minority class instances (bad credit risks) effectively.\n",
        "  - **Accuracy**: While it might show reasonable accuracy in imbalanced datasets, this is misleading as it doesn't reflect true predictive capability.\n",
        "\n",
        "## k-Nearest Neighbors (k-NN) Performance\n",
        "- **Purpose**: The k-NN model is a simple, instance-based learning algorithm that classifies data points based on the majority class of their nearest neighbors.\n",
        "- **Metrics**:\n",
        "  - **Recall**: k-NN can achieve better recall than the Dummy Classifier by considering the local structure of the data, but it may still struggle with imbalanced datasets.\n",
        "  - **Precision**: Precision can vary depending on the choice of `k` and the distance metric, but it generally improves over the Dummy Classifier.\n",
        "  - **F1 Score**: The F1 score for k-NN is typically higher than that of the Dummy Classifier, indicating a better balance between precision and recall.\n",
        "  - **Accuracy**: k-NN often shows improved accuracy over the Dummy Classifier, but it may not match the performance of more sophisticated models like Random Forests.\n",
        "\n",
        "## Random Forest Classifier Performance\n",
        "- **Purpose**: The Random Forest model is an ensemble method that builds multiple decision trees to improve prediction accuracy and robustness [@kuhn2013].\n",
        "- **Metrics**:\n",
        "  - **Recall**: Random Forests excel in recall, particularly for the minority class, by effectively capturing complex patterns in the data.\n",
        "  - **Precision**: It also achieves high precision, reducing false positives and ensuring reliable predictions.\n",
        "  - **F1 Score**: The F1 score is significantly higher for Random Forests, reflecting its superior ability to balance precision and recall.\n",
        "  - **Accuracy**: Random Forests typically achieve the highest accuracy among the models tested, providing a comprehensive and reliable classification.\n",
        "\n",
        "## Comparison\n",
        "- **Dummy Classifier**: Serves as a baseline with limited predictive power, primarily due to its simplistic approach.\n",
        "- **k-NN**: Offers improvements over the Dummy Classifier by leveraging local data structures, but its performance is sensitive to parameter choices and data imbalance.\n",
        "- **Random Forest**: Outperforms both the Dummy Classifier and k-NN by providing a robust, accurate, and balanced classification, making it the preferred choice for credit risk assessment.\n",
        "\n",
        "These findings highlight the importance of selecting appropriate models for credit risk prediction [@lessmann2015]. While k-NN offers some improvements over a baseline, the Random Forest model's ability to handle complex datasets and provide reliable predictions makes it the most effective tool for this task.\n",
        "\n",
        "# References\n",
        ":::{#refs}\n",
        ":::"
      ],
      "id": "58ce7819"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/ayush/miniforge3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}